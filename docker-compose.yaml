version: '2.1'
services:
  user-db:
    image: mariadb:latest
    # ports:
    #   - 3306
    restart: always
    networks:
      - back-tier
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

  dorm-db:
    image: mariadb:latest
    # ports:
    #   - 3306
    restart: always
    networks:
      - back-tier
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

    
  register:
    image: hw7-register
    build:
      context: ./register
      dockerfile: Dockerfile
    # ports:
    #   - 8088:80
    networks:
      # - front-tier
      - back-tier
    links:
      - user-db
    volumes:
      - "./config:/config"
    depends_on:
      - user-db
      
  login:
    image: hw7-login
    build:
      context: ./login
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - back-tier
    volumes:
      - "./config:/config"
    links:
      - user-db
      - dorm-db
    depends_on:
      - user-db
      - dorm-db

  order:
    image: hw7-order
    build:
      context: ./order
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - back-tier
    volumes:
      - "./config:/config"
    links:
      - user-db
      - dorm-db
    depends_on:
      - user-db
      - dorm-db


  dorm:
    image: hw7-dorm
    build:
      context: ./dorm
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - back-tier
    volumes:
      - "./config:/config"
    links:
      - user-db
      - dorm-db
    depends_on:
      - user-db
      - dorm-db

  nginx:
    image: nginx
    ports:
      - 80:80
    links:
      - register
      - login
      - dorm
    networks:
      - back-tier
    volumes:
      - "./nginx/logs:/var/log/nginx"
      - "./nginx/ssl:/etc/nginx/ssl"
      - "./nginx/conf.d:/etc/nginx/conf.d"
      - "./nginx/dist:/dist"
      - "./static:/static"
    depends_on:
      - register
      - login
      - dorm
    
networks:
  back-tier:
    driver: bridge
