version: '2.1'
services:
  user-db:
    image: mariadb:latest
    # ports:
    #   - 3306
    restart: always
    networks:
      - back-tier
    # environment:
    #   MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    #   MYSQL_DATABASE: ${MYSQL_DATABASE}
    #   MYSQL_USER: ${MYSQL_USER}
    #   MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    #   MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    env_file:
      - ".env"
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD}
        --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

  dorm-db:
    image: mariadb:latest
    restart: always
    networks:
      - back-tier
    # environment:
    #   MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    #   MYSQL_DATABASE: ${MYSQL_DATABASE}
    #   MYSQL_USER: ${MYSQL_USER}
    #   MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    #   MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    env_file:
      - ".env"
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD}
        --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

  register:
    image: ms-register
    build:
      context: ./register
      dockerfile: Dockerfile
    networks:
      - front-tier
      - back-tier
    # links:
    #   - user-db
    volumes:
      - "./config:/config"
    depends_on:
      - user-db
      - user

  login:
    image: ms-login
    build:
      context: ./login
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - front-tier
      - back-tier
    volumes:
      - "./config:/config"
    # links:
    #   - user-db
    #   - dorm-db
    depends_on:
      - user-db
      - dorm-db
      - user

  order:
    image: ms-order
    build:
      context: ./order
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - front-tier
      - back-tier
    volumes:
      - "./config:/config"
    # links:
    #   - user-db
    #   - dorm-db
    depends_on:
      - user-db
      - dorm-db
      - user

  user:
    image: ms-user
    build:
      context: ./user
      dockerfile: Dockerfile
    environment:
      INIT_DB_IF_EMPTY: "true"
    networks:
      - front-tier
      - back-tier
    # links:
    #   - user-db
    volumes:
      - "./config:/config"
    depends_on:
      - user-db

  dorm:
    image: ms-dorm
    build:
      context: ./dorm
      dockerfile: Dockerfile
    # ports:
    #   - 8089:80
    networks:
      - front-tier
      - back-tier
    volumes:
      - "./config:/config"
    # links:
    #   - user-db
    #   - dorm-db
    depends_on:
      - user-db
      - dorm-db
      - user

  # nginx:
  #   image: nginx
  #   ports:
  #     - 80:80
  #   links:
  #     - register
  #     - login
  #     - dorm
  #   networks:
  #     - back-tier
  #   volumes:
  #     - "./nginx/logs:/var/log/nginx"
  #     - "./nginx/ssl:/etc/nginx/ssl"
  #     - "./nginx/conf.d:/etc/nginx/conf.d"
  #     - "./nginx/dist:/dist"
  #     - "./static:/static"
  #   depends_on:
  #     - register
  #     - login
  #     - dorm

  node-server:
    image: ms-node-server
    build:
      context: ./node-server
      dockerfile: Dockerfile
    ports:
      - 80:80
    environment:
      USER_SERVICE_URL: "user:80"
      DORM_SERVICE_URL: "dorm:80"
      ORDER_SERVICE_URL: "order:80"
      LOGIN_SERVICE_URL: "login:80"
      REGISTER_SERVICE_URL: "register:80"
      TOKEN_SERVICE_URL: "user:80"
      TEST_SERVICE_URL: "user:80"
    networks:
      - front-tier
      - back-tier
    volumes:
      - "./dist:/dist"
    depends_on:
      - register
      - login
      - dorm
      - order
      - user

networks:
  back-tier:
    driver: bridge
  front-tier:
    driver: bridge
